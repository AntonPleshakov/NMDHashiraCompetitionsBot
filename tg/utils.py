import datetime
import os
import threading
import time
from textwrap import dedent
from typing import Union, Tuple, List, Optional

from telebot import TeleBot
from telebot.types import (
    InlineKeyboardButton,
    KeyboardButton,
    Message,
    CallbackQuery,
    ReactionType,
    ReactionTypeEmoji,
    InlineKeyboardMarkup,
)

from common.nmd_datetime import nmd_now
from db.admins import admins_db
from db.ratings import Rating, ratings_db
from db.tournament import TournamentDB
from db.tournament_structures import Match, TournamentSettings, RegistrationRow
from logger.NMDLogger import nmd_logger


def get_user_link(user_id: int, name: str) -> str:
    return f'<a href="tg://user?id={user_id}">{name}</a>'


def get_permissions_denied_message(user_id: int):
    admins_list = [
        get_user_link(admin.user_id, admin.username) for admin in admins_db.get_admins()
    ]
    return (
        "–í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.\n"
        + "–í–∑–∞–∏–º–æ–¥–µ—Å—Ç–≤–∏–µ —Å —Ç—É—Ä–Ω–∏—Ä–æ–º –¥–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –≤ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ –≤—ã–¥–µ–ª–µ–Ω–Ω—ã—Ö —á–∞—Ç–∞—Ö.\n"
        + "–î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω–æ–π —á–∞—Å—Ç–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –æ–¥–Ω–æ–º—É –∏–∑ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ —Å –≤–∞—à–∏–º –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–æ–º.\n"
        + f"–í–∞—à ID: {user_id}\n"
        + "–°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤: "
        + ", ".join(admins_list)
    )


def report_to_admins(bot: TeleBot, message: str):
    nmd_logger.info(f"Report a message to admins:\n{message}")
    for admin in admins_db.get_admins():
        bot.send_message(chat_id=admin.user_id.value, text=message)


def get_right_suffix(value: int, word_without_suffix: str) -> str:
    if value % 10 == 1 and value % 100 != 11:
        return word_without_suffix
    elif 2 <= value % 10 <= 4 and not 12 <= value % 100 <= 14:
        return word_without_suffix + "–∞"
    else:
        return word_without_suffix + "–æ–≤"


def _create_schedule(settings: TournamentSettings) -> str:
    DATETIME_FORMAT = "%d.%m %H:%M"
    registration_hours = settings.registration_duration_hours.value
    tour_hours = settings.round_duration_hours.value
    tours = settings.rounds_number.value
    curr_time = nmd_now() + datetime.timedelta(hours=registration_hours)

    schedule_rows = []
    for i in range(1, tours + 1):
        schedule_rows.append(f"{curr_time.strftime(DATETIME_FORMAT)} - {i} –¢—É—Ä")
        curr_time += datetime.timedelta(hours=tour_hours)

    schedule_rows.append(f"{curr_time.strftime(DATETIME_FORMAT)} - –ü–æ–¥–≤–µ–¥–µ–Ω–∏–µ –∏—Ç–æ–≥–æ–≤")

    return "\n        ".join(schedule_rows)  # spaces for correct work of dedent


def _get_admins_usernames() -> str:
    admins = admins_db.get_admins()
    admins_links = []
    for admin in admins:
        admins_links.append(f"{get_user_link(admin.user_id, admin.username)}")
    return " ".join(admins_links)


def _get_author_link() -> str:
    author = admins_db.get_admins()[0]
    return get_user_link(author.user_id, author.username)


def get_tournament_welcome_message(
    settings: TournamentSettings, tournament_url: str
) -> str:
    registration_hours = settings.registration_duration_hours.value
    tour_hours = settings.round_duration_hours.value
    tours = settings.rounds_number.value
    return dedent(
        f"""\
        <b>–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é –≤—Å–µ—Ö –Ω–∞ –æ—á–µ—Ä–µ–¥–Ω–æ–º —Ç—É—Ä–Ω–∏—Ä–µ</b>
        –†–µ–≥–ª–∞–º–µ–Ω—Ç:
        –°–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–≤–æ–¥–∏—Ç—Å—è –ø–æ —Å–∏—Å—Ç–µ–º–µ –ú–∞–∫-–ú–∞–≥–æ–Ω–∞ –≤ {tours} {get_right_suffix(tours, "—Ç—É—Ä")}
        –ü–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º —Ç—É—Ä–Ω–∏—Ä–∞ —Ä–µ–π—Ç–∏–Ω–≥ –≤—Å–µ—Ö –∏–≥—Ä–æ–∫–æ–≤ –±—É–¥–µ—Ç –ø–µ—Ä–µ—Å—á–∏—Ç–∞–Ω –ø–æ —Ñ–æ—Ä–º—É–ª–µ –≠–ª–æ —Å —É—á–µ—Ç–æ–º –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–≥–æ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è.
        –í—ã –º–æ–∂–µ—Ç–µ –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –∫ –∞–≤—Ç–æ—Ä—É ({_get_author_link()}) –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π –ø–æ —Ñ–æ—Ä–º—É–ª–∞–º.
        –í—Ä–µ–º—è –Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é - {registration_hours} {get_right_suffix(registration_hours, "—á–∞—Å")}.
        –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∫–∞–∂–¥–æ–≥–æ —Ç—É—Ä–∞ - {tour_hours} {get_right_suffix(tour_hours, "—á–∞—Å")}.
        
        –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ:
        {_create_schedule(settings)}
        
        –í–∞–º –ø—Ä–µ–¥—Å—Ç–æ–∏—Ç —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ –¥–æ–≥–æ–≤–∞—Ä–∏–≤–∞—Ç—å—Å—è –æ –±–∏—Ç–≤–µ –∏ —Å–æ–∑–¥–∞–≤–∞—Ç—å –∫–∞—Ä—Ç—É –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å —Ç—É—Ä–Ω–∏—Ä–Ω–æ–π —Ç–∞–±–ª–∏—Ü–µ–π.
        –í—Å–µ –±–∏—Ç–≤—ã –ø—Ä–æ—Ö–æ–¥—è—Ç –¥–æ –ø–µ—Ä–≤–æ–π –ø–æ–±–µ–¥—ã.

        –ù–∞–ø–∏—à–∏—Ç–µ –º–Ω–µ –ª–∏—á–Ω–æ (–±–æ—Ç—É), –µ—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –∏–ª–∏ –æ–±–Ω–æ–≤–∏—Ç—å —Å–≤–æ–π –∏–≥—Ä–æ–≤–æ–π –Ω–∏–∫–Ω–µ–π–º.

        –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –±–∏—Ç–≤ –º–æ–∂–Ω–æ –±—É–¥–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –ø–æ–¥ —Å–æ–æ–±—â–µ–Ω–∏–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–≥–æ —Ç—É—Ä–∞.
        –í–∞–º —Å–ª–µ–¥—É–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –ø–æ–±–µ–¥—É, –µ—Å–ª–∏ –≤–∞—à —Å–æ–ø–µ—Ä–Ω–∏–∫ –Ω–µ —Å–º–æ–≥ —É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å.
        –í—Å—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç—É—Ä–Ω–∏—Ä–µ –¥–æ—Å—Ç—É–ø–Ω–∞ –ø–æ <a href="{tournament_url}">—Å—Å—ã–ª–∫–µ</a>

        –ü–æ –≤—Å–µ–º –≤–æ–ø—Ä–æ—Å–∞–º –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º:
        {_get_admins_usernames()}
        """
    )


def get_next_tour_message(pairs: List[Match], tours_number: int) -> str:
    pairs_list = []
    for match in pairs:
        first = get_user_link(match.first_id.value, match.first.value)
        if not match.second.value:
            pairs_list.append(f"{first} - —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –ø–æ–±–µ–¥–∞")
            continue
        second = get_user_link(match.second_id.value, match.second.value)
        pairs_list.append(f"{first} {match.result_str} {second}: {match.map.value}")
    pairs_str = "\n        ".join(pairs_list)  # spaces for correct work of dedent
    print(pairs_list)
    return dedent(
        f"""\
        <b>{tours_number} —Ç—É—Ä</b>

        –ü–∞—Ä—ã:
        {pairs_str}

        –ü–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –±–∏—Ç–≤—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç, –Ω–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É –ø–æ–¥ —ç—Ç–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º.
        """
    )


def get_tournament_end_message(tournament_db: TournamentDB) -> str:
    tournament_url = tournament_db.get_url()
    results = tournament_db.get_final_results()

    winners_links = [
        get_user_link(p.tg_id.value, p.tg_username.value) for p in results[:3]
    ]
    places = ["ü•á –ü–µ—Ä–≤–æ–µ", "ü•à –í—Ç–æ—Ä–æ–µ", "ü•â –¢—Ä–µ—Ç—å–µ"]
    winners_list = []
    for i, winner in enumerate(winners_links):
        if i > len(places):
            break
        winners_list.append(places[i] + " –º–µ—Å—Ç–æ: " + winner)
    winners_str = "\n        ".join(winners_list)  # spaces for correct work of dedent

    new_ratings_list = []
    for i, result in enumerate(results):
        username = result.nmd_username.value
        if not username:
            username = result.tg_username.value
        new_ratings_list.append(
            f"{i + 1}: {get_user_link(result.tg_id.value, username)} {result.rating}"
        )
    new_ratings_str = "\n        ".join(
        new_ratings_list
    )  # spaces for correct work of dedent

    return dedent(
        f"""\
        –¢—Ä–∏–±—É—Ç—ã!

        –ù–∞—à —Ç—É—Ä–Ω–∏—Ä –ø–æ–¥–æ—à–µ–ª –∫ –∫–æ–Ω—Ü—É.
        –í—ã –≤—Å–µ –ø—Ä–æ—è–≤–∏–ª–∏ –Ω–µ–≤–µ—Ä–æ—è—Ç–Ω—É—é —Å–∏–ª—É, —Å—Ç—Ä–∞—Ç–µ–≥–∏—é –∏ –≤–æ–ª—é –∫ –ø–æ–±–µ–¥–µ.
        –ü—Ä–∏—à–ª–æ –≤—Ä–µ–º—è –æ–±—ä—è–≤–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏ —á–µ—Å—Ç–≤–æ–≤–∞—Ç—å –Ω–∞—à–∏—Ö —á–µ–º–ø–∏–æ–Ω–æ–≤.

        {winners_str}

        –í—ã –ø–æ–∫–∞–∑–∞–ª–∏ –≤—ã—Å—à–∏–π –∫–ª–∞—Å—Å –≤ —ç—Ç–æ–º —Ç—É—Ä–Ω–∏—Ä–µ, –∏ –≤–∞—à–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –Ω–∞–≤—Å–µ–≥–¥–∞ –æ—Å—Ç–∞–Ω—É—Ç—Å—è –≤ –∏—Å—Ç–æ—Ä–∏–∏ –Ω–∞—à–∏—Ö –±–∏—Ç–≤.
        –í—Å—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö —Ç—É—Ä–Ω–∏—Ä–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ –ø–æ —ç—Ç–æ–π <a href="{tournament_url}">—Å—Å—ã–ª–∫–µ</a>
        –†–µ–π—Ç–∏–Ω–≥–∏ –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –±—ã–ª–∏ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∏ –ø–µ—Ä–µ—Å—á–∏—Ç–∞–Ω—ã.
        {new_ratings_str}
        –†–µ–π—Ç–∏–Ω–≥ –ª–∏—Å—Ç –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ <a href="{ratings_db.get_url()}">—Å—Å—ã–ª–∫–µ</a>

        –ú—ã –±–ª–∞–≥–æ–¥–∞—Ä–∏–º –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∑–∞ –∏—Ö —É—Å–µ—Ä–¥–∏–µ –∏ –±–æ–µ–≤–æ–π –¥—É—Ö.
        –ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –∫–∞–∫–∏–µ-–ª–∏–±–æ –≤–æ–ø—Ä–æ—Å—ã –∏–ª–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è, –Ω–µ —Å—Ç–µ—Å–Ω—è–π—Ç–µ—Å—å –æ–±—Ä–∞—â–∞—Ç—å—Å—è –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º.

        –ü—É—Å—Ç—å —É–¥–∞—á–∞ –≤—Å–µ–≥–¥–∞ –±—É–¥–µ—Ç –Ω–∞ –≤–∞—à–µ–π —Å—Ç–æ—Ä–æ–Ω–µ, –∏ –¥–æ –≤—Å—Ç—Ä–µ—á–∏ –Ω–∞ —Å–ª–µ–¥—É—é—â–µ–º —Ç—É—Ä–Ω–∏—Ä–µ! üéÆüèÜ

        –° —É–≤–∞–∂–µ–Ω–∏–µ–º,
        –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏—è —Ç—É—Ä–Ω–∏—Ä–∞
        """
    )


def get_tournament_end_without_players_message() -> str:
    return dedent(
        """\
        –¢—Ä–∏–±—É—Ç—ã!

        –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–∞—à —Ç—É—Ä–Ω–∏—Ä –∑–∞–∫–æ–Ω—á–∏–ª—Å—è –Ω–µ —É—Å–ø–µ–≤ –Ω–∞—á–∞—Ç—å—Å—è.
        –ë—É–¥–µ–º –Ω–∞–¥–µ—è—Ç—å—Å—è —á—Ç–æ –≤ —Å–ª–µ–¥—É—é—â–∏–π —Ä–∞–∑ –∂–µ–ª–∞—é—â–∏—Ö –ø–æ—É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å –±—É–¥–µ—Ç –±–æ–ª—å—à–µ.

        –ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –∫–∞–∫–∏–µ-–ª–∏–±–æ –≤–æ–ø—Ä–æ—Å—ã –∏–ª–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è, –Ω–µ —Å—Ç–µ—Å–Ω—è–π—Ç–µ—Å—å –æ–±—Ä–∞—â–∞—Ç—å—Å—è –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º.

        –ü—É—Å—Ç—å —É–¥–∞—á–∞ –≤—Å–µ–≥–¥–∞ –±—É–¥–µ—Ç –Ω–∞ –≤–∞—à–µ–π —Å—Ç–æ—Ä–æ–Ω–µ, –∏ –¥–æ –≤—Å—Ç—Ä–µ—á–∏ –Ω–∞ —Å–ª–µ–¥—É—é—â–µ–º —Ç—É—Ä–Ω–∏—Ä–µ! üéÆüèÜ

        –° —É–≤–∞–∂–µ–Ω–∏–µ–º,
        –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏—è —Ç—É—Ä–Ω–∏—Ä–∞
        """
    )


def get_ids(message: Union[Message, CallbackQuery]) -> Tuple[int, int, int]:
    user_id = message.from_user.id
    if isinstance(message, CallbackQuery):
        message = message.message
    chat_id = message.chat.id
    message_id = message.id
    return user_id, chat_id, message_id


def get_username(message: Union[Message, CallbackQuery]) -> str:
    user = message.from_user
    if user.username:
        return user.username
    return user.first_name


def get_player_rating_view(player: Union[RegistrationRow, Rating]) -> str:
    return f"{player.tg_username.value}({player.nmd_username.value}): {player.rating.value}"


class Button:
    def __init__(self, descr: str, data: str = ""):
        self.data = data
        self.descr = descr

    def inline(self):
        return InlineKeyboardButton(text=self.descr, callback_data=self.data)

    def reply(self):
        return KeyboardButton(text=self.descr)


def empty_filter(_):
    return True


def get_wait_emoji() -> List[ReactionType]:
    return [ReactionTypeEmoji("‚úç")]


def get_like_emoji() -> List[ReactionType]:
    return [ReactionTypeEmoji("üëç")]


def get_dislike_emoji() -> List[ReactionType]:
    return [ReactionTypeEmoji("üëé")]


def main_menu_keyboard():
    keyboard = InlineKeyboardMarkup(row_width=1)
    keyboard.add(Button("–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã", "admins").inline())
    keyboard.add(Button("–†–µ–π—Ç–∏–Ω–≥–∏", "ratings").inline())
    keyboard.add(Button("–ì–ª–æ–±–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏", "global_settings").inline())
    keyboard.add(Button("–¢—É—Ä–Ω–∏—Ä", "tournament").inline())
    keyboard.add(Button("–°–ª—É–∂–µ–±–Ω—ã–µ", "dev").inline())
    keyboard.add(Button("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ", "users").inline())
    return keyboard


def home(message: Union[Message, CallbackQuery], bot: TeleBot):
    username = get_username(message)
    nmd_logger.info(f"Home for {username}")
    keyboard = main_menu_keyboard()
    text = "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è"
    user_id, chat_id, message_id = get_ids(message)
    if isinstance(message, CallbackQuery):
        bot.edit_message_text(
            text=text,
            chat_id=chat_id,
            message_id=message_id,
            reply_markup=keyboard,
        )
    else:
        bot.send_message(
            chat_id=chat_id,
            text=text,
            reply_markup=keyboard,
        )
    bot.delete_state(user_id)


class TournamentTimer:
    def __init__(self):
        self._timer: Optional[threading.Timer] = None
        self._started_at = None
        self._interval = None

    def update_timer(self, interval, function, args=None, kwargs=None):
        if os.getenv("MODE", "Release") == "Debug":
            interval = interval / 60  # hours to minutes for debug mode
        self._timer = threading.Timer(interval, function, args, kwargs)
        self._interval = interval
        return self

    def start(self):
        if self._timer:
            self._timer.start()
            self._started_at = time.time()

    def remaining(self) -> int:
        if self._interval is None or self._started_at is None:
            print("Remaining: Timer inactive")
            return -1
        print(
            f"Remaining: timer is active: interval - {self._interval}; now - {time.time()}; started_at - {self._started_at}"
        )
        return self._interval - (time.time() - self._started_at)

    def cancel(self):
        if self._timer:
            self._timer.cancel()
            self._started_at = None


tournament_timer = TournamentTimer()
